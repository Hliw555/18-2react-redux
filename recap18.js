/*
*  Terms
--  1. just as = เช่นเดียวกับ
--  2. update = การกำหนดข้อมูลใหม่ล่าสุดให้กับตัวแปร
--  3. enclose = ปิดหุ้ม
--  3. wrap = หุ้ม ความหมายเดียวกัน enclose
--  4. detect = ตรวจพบ
--  5. adjacent = ที่อยู่ติดกัน, อยู่ข้าง ๆ กัน > adjacent jsx element
--  6. workaround = วิธีแก้ปัญหา
--  7. styling = การจัดรูปแบบ
--  8. in conjunction = ร่วมกัน, ร่วม => I use backdrop in conjunction
.with my modal
--  9. like = เช่นเดียวกับ, เหมือนกับ
-- 10. when ever = เมื่อไหร่ก็ตาม
-- 11. and so on = และอื่น ๆ
-- 12. directly = โดยตรง
-- 13. trigger function = call function
-- 14. run function = call functions
-- 15. this funciton run again = function ทำงานอีกครั้ง
-- 16. such a dependency = ส่วนเสริม ดังกล่าว
-- 17. dummy = จำลอง, a dummy app = appจำลอง
-- 18. infinit = ไม่มีที่สิ้นสุด, infinite loop = การวนที่ไม่สิ้นสุด
-- 19. advantage = ข้อดี, disadvantage = ข้อเสีย
-- 20. include = มี, ประกอบด้วย
-- 21. beside = นอกเหนือจาก, นอกจาก, ข้าง
-- 22. in addition = นอกจากนี้
-- 23. validity = ความถูกต้อง
-- 24. consistent = สม่ำเสมอ
-- 25. layout = แผนผัง = แบบที่เขียนย่อขนาดจากของจริง เช่น บ้าน อาคาร ตึก.
-- 26. as always = เช่นเคย
-- 27. structure = สร้าง => โครงสร้าง
-- 28. destructure = ทำลาย => โครงสร้าง
-- 29. feedback = ข้อเสนอแนะ
-- 30. downside = ข้อเสีย
-- 31. derive = ได้มา, ได้รับมา => use with from = derive from
-- 32. validity = ความถูกต้อง
-- 33. disabled = ปิดใช้งาน ตรงข้ามกับคำว่า ใช้กับ button
-- 34. enable = เปิดใช้งาน = activate
-- 35. authentication = การรับรองความถูกต้อง
-- 36. an alternative to = ทางเลือก แทน
-- 37. such = ดังกล่าว => we can create such a store
-- 38. mutate = เปลี่ยน => ความหมาย = change
-- 39. subscribe to = สมัครรับข้อมูล จาก
-- 40. toolkit = ชุดเครื่องมือ, tool = เครื่องมือ

/////////////////////////////////////////////////////////////////////
---- เนื้อหา ตอนที่ 7
-- บท 83 เกิด error => app crashes          อ่าน error messages
-- บท 84 เกิด error => app doesn't crash     อ่าน error messages, analyze code flow
*/

/////////////////////////////////////////////////////////////////////

/*
* ---- chapters สำคัญ ที่ต้องทวน ของแต่ละ section
---- section  3 => 35, 36, 37, 38
---- section  4 => 46, 47, 48, 49, 52, 55, 56, 57, 58
---- section  5 => 63, 64, 65  ==>  68 เป็นเรื่อง chart ไม่ใช้
---- section  6 => 74 inline , 75 ใช้ selector ใน css file เราชอบอันนี้
---- section  7 => 83, 84
---- section  8 => ทวนทุกบท เป็นการฝึกทำ app ภาคปฎิบัติ
---- section  9 => 102 = <React.Fragment> => react,
                   104 = createPortal() => react-dom => reguler method,
                   105 = useRef() => react => Hook
---- section 10 =>
---- section 17 => การสร้าง async function และ throw error ใน async
.function
---- section 18 =>

*/

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/*
*                          Section 18
*                            Redux
!
*/
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
/*

/////////////////////////////////////////////////////////////////////
-----           230. Exploring the core redux concept          -----
/////////////////////////////////////////////////////////////////////
-- npm init คำสั่งนี้มันจะสร้าง package.json file ให้เรา โดยเราไม่ต้องสร้าง
.react application บทนี้สอน redux basic ที่ไม่ได้ใช้ react app
---- const redux = require('redux');
---- const store = redux.createStore(pass reducer function here);
-- เรียน 3 method ที่อยู่ใน store object ได้แก่
.     store.getState();     store.subscribe();    store.dispatch();
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----           231. More redux basics          -----
/////////////////////////////////////////////////////////////////////
---- dispatch drecement and wrote if (=== 'decrement') in reducer
.function
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----           232. Preparing a new project          -----
/////////////////////////////////////////////////////////////////////
---- install redux and react-redux
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----           233. Create a redux store for react app         -----
/////////////////////////////////////////////////////////////////////
---- but not connected yet to react app
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----           234. Create provider by react-redux        -----
/////////////////////////////////////////////////////////////////////
---- Pure redux is used to create the store only
---- ส่วน Provider เราได้จาก react-redux
-- pass redux store to the store property of the provider เพื่อให้
.provider รู้ว่า redux store อันไหนที่เราจะใช้ และมันอยู่ที่ไหน
-- The provider is the ตัวกลางในการเชื่อมต่อระหว่าง react-app
.and redux-store
---- import Provider from react-redux
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----           235. use useSelector        -----
/////////////////////////////////////////////////////////////////////
---- use useSelector of react-redux to get redux data to react
.components
-- useSelector จะตั้งค่าการสมัครรับข้อมูลจาก redux store ให้อัตโนมัติ
-- useSelector expects 1 callback func และ useSelector จะส่ง
.state ทั้ง state ให้กับ parameter และภายใน callback เราสามารถเลือก
.ส่งคืน state บางส่วนที่เราต้องการ ออกมาใช้งานใน react component ได้
-- ข้อดีในการใช้ useSelector คือ เราสามารถเลือก บางส่วนของ state ที่
.เราต้องการ ออกมาได้ โดยไม่จำเป็นต้องเอา state ทั้ง state มาจัดการ
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////
-----    236. Dispatch actions from inside react components    -----
/////////////////////////////////////////////////////////////////////
---- use react-redux useDispatch hook, it return dispatch function,
.use the dispatch function to dispatch an action object to the redux
.store, เรียกใช้ dispatch ทิ้งไว้ใน callback of onClick แล้วป้อน object ที่มี
.ชนิดการกระทำ => dispatch({type: 'increment'})
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
-----       238. Attach extra payloads to action objects  -----
/////////////////////////////////////////////////////////////////////
---- dispatch({type: 'increase', amount: 5})
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----        239. Add sub state in core state object        -----
/////////////////////////////////////////////////////////////////////
---- เพิ่ม new property ให้กับ วัตถุ state ได้เลย
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----         240. The way to update state correctly        -----
/////////////////////////////////////////////////////////////////////
---- ถ้าเราต้องการ กำหนดค่าใหม่ให้กับ state เราห้าม เปลี่ยน state
.ที่มีอยู่ สิ่งที่ถูกต้องคือ เราต้องสร้าง วัตถุstateอันใหม่ คัดลอกค่าเก่าที่ต้องการ
.และกำหนดค่าใหม่ในนั้น แล้ว return new state object ไปแทนที่ อันเก่า
.ป้องกัน errors ที่จะเกิดขึ้นได้
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           241. Introduce redux toolkit        -----
/////////////////////////////////////////////////////////////////////
---- redux, react-redux, redux toolkit ถูกพัฒนาโดยทีมเดียวกัน
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----  242. การใช้ createSlice ของ redux toolkit เพื่อเราไม่ต้องเขียน   -----
/////////////////////////////////////////////////////////////////////
---- npm install @reduxjs/toolkit เมื่อ install reduxjs toolkit แล้ว
.เราสามารถ ลบ redux ออกได้ เพราะ redux toolkit มี redux มาให้ด้วย
.ดังนั้น เราแค่ install redux toolkit ตั้งแต่แรกก็ได้
---- การใช้ createSlice ของ redux toolkit เพื่อเราไม่ต้องเขียน if statement
.เยอะ ๆ, เราสามารถ เปลี่ยนแปลง state ที่เราต้องการ ที่มีอยู่โดยตรงได้ และไม่ต้อง
.copy state ที่ไม่ได้เปลี่ยนแปลงอันอื่น createSlice จะทำให้อัตโนมัติ
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
-----           2        -----
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
*/